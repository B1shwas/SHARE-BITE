generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  name         String
  email        String        @unique
  password     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  role         ROLE
  tokens       Token[]
  individual   Individual?
  organization Organization?
  receiver     Receiver?
  donor        Donor?
  Social       Social[]
}

model Token {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  token     String
  isValid   Boolean  @default(true)
  createdAt DateTime @default(now())
  expiresAt DateTime
  updatedAt DateTime @updatedAt
}

model Individual {
  id        String    @id @map("user_id")
  user      User      @relation(fields: [id], references: [id])
  address   String
  contact   String
  bio       String?
  profile   String?
  gender    GENDER?
  dob       DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Donor     Donor?    @relation(fields: [donorId], references: [id])
  donorId   String?
}

model Organization {
  id         String    @id @map("user_id")
  user       User      @relation(fields: [id], references: [id])
  name       String    @unique
  address    String
  contact    String
  bio        String?
  profile    String?
  website    String?
  foundedAt  DateTime?
  isNgo      Boolean
  isVerified Boolean
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Social {
  id        String        @id @default(cuid())
  userId    String
  user      User          @relation(fields: [userId], references: [id])
  platform  SOCIAL_HANDLE
  link      String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Donor {
  id            String          @id @default(cuid())
  userId        String?         @unique
  user          User?           @relation(fields: [userId], references: [id])
  maxStorage    Int?
  preferredFood FOOD_CATEGORY[]
  donations     DonationPost[]
  individual    Individual[]
}

model Receiver {
  id             String            @id @default(cuid())
  userId         String            @unique
  user           User              @relation(fields: [userId], references: [id])
  preferredFood  FOOD_CATEGORY[]
  hasFrozenStore Boolean
  receivingHours Json
  requests       DonationRequest[]
}

model DonationPost {
  id              String               @id @default(cuid())
  donorId         String
  donor           Donor                @relation(fields: [donorId], references: [id])
  title           String
  description     String
  photos          String[]
  pickupLocation  String?
  expiryDate      DateTime
  urgentPickup    Boolean?             @default(false)
  status          DONATION_POST_STATUS @default(PENDING)
  DonationRequest DonationRequest[]
}

model DonationRequest {
  id         String                  @id @default(cuid())
  donationId String
  donation   DonationPost            @relation(fields: [donationId], references: [id])
  receiverId String
  receiver   Receiver                @relation(fields: [receiverId], references: [id])
  status     DONATION_REQUEST_STATUS @default(PENDING)
}

enum DONATION_POST_STATUS {
  PENDING
  RESERVED
  COMPLETED
  EXPIRED
  SCHEDULED
}

enum DONATION_REQUEST_STATUS {
  ACCEPTED
  REJECTED
  CANCELLED
  PENDING
}

enum FOOD_CATEGORY {
  GRAINS_AND_CEREALS
  FRUITS_AND_VEGETABLES
  DAIRY_PRODUCTS
  MEAT_AND_POULTRY
  CANNED_AND_PACKAGED
  BEVERAGES
  SNACKS_AND_SWEETS
  BABY_FOOD
  BAKED_GOODS
  PLANT_BASED
  COOKED_MEALS
  OTHER
}

enum SOCIAL_HANDLE {
  FACEBOOK
  INSTAGRAM
  TWITTER
  LINKEDIN
  MEDIUM
}

enum ROLE {
  ADMIN
  VOLUNTEER
  DONOR
  RECEIVER
}

enum GENDER {
  MALE
  FEMALE
  OTHER
}
